

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>

int N;
char Oper[201];
int Firstchild[201];
int Secondchild[201];
int Num[201];
struct node
{
  char value;
  int num;
  struct node *left;
  struct node *right;
};

struct node* head;
struct node* maketree (int k);
int m ;
int main(void)
{
	int test_case;

	for(test_case = 1; test_case <= 10; ++test_case)
	{
		int i, j;
		int addr;
		char str[200];
		m = 1;
		memset(Firstchild, 0, sizeof(int) * 201);
		memset(Secondchild, 0, sizeof(int) * 201);
		memset(Num, 0, sizeof(int) * 201);
		memset(Oper, 0, sizeof(char) * 201);
		head = NULL;


		scanf("%d", &N);
		for(i = 0; i < N; i++)
		{
			scanf("%d", &addr);
			scanf("%s", str);

			if( strcmp(str,"+") == 0 || strcmp(str,"-")== 0  || strcmp(str,"/") == 0 || strcmp(str,"*")== 0  )
				Oper[addr] = str[0];
			else
				Num[addr] = atoi(str);

			if(addr*2 <= N)
			{
				scanf("%d ",&Firstchild[addr]);
				if(addr*2 + 1 <= N)
					scanf("%d ",&Secondchild[addr]);
			}
		}


		printf("#%d ", test_case);
		maketree(1);
		if (m == -1)
		    printf("0\n");
		else 
			printf("1\n");



	}
	Sleep(100000);
	return 0;//정상종료시 반드시 0을 리턴해야 합니다.
}

struct node* maketree (int k) {

	if(k == 0 ) {
		//free(head);
		return NULL;
	}
	struct node *n;
	n = (struct node *)malloc(sizeof(struct node));
	n->left = NULL;
	n->right = NULL;
	n->value = ' ';
	n->num = 0;
	
	if ((Firstchild[k] != 0 && Secondchild[k] == 0)|| (Firstchild[k] == 0 && Secondchild[k] != 0)) {
	    n->value = 'r'; m = -1;
	} else if((Firstchild[k] == 0 && Secondchild[k] == 0) && Oper[k] != 0) {
		n->value = 'r'; m=-1;
	}else if ( Oper[k] == 0 && (Firstchild[k] != 0 && Secondchild[k] != 0)) {
		n->value = 'r';m=-1;
	} else if (Firstchild[k] != 0 && Secondchild[k] != 0) {
	    n->value = Oper[k];
	} else { 
		n->num = Num[k];
	}
	//printf("## %c ##\n",n->value);
	n->left = maketree(Firstchild[k]);
	n->right = maketree(Secondchild[k]);
	if(k == 1) {
		head = n;
	}
	//free(n);
	return n;
}
