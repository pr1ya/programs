#include<stdio.h>
#include<stdlib.h>
#include<windows.h>

struct adjacent {
	int val;
	int weight;
	struct adjacent *next;
};
struct adjacent *rhead = NULL;
int w[6] = {10000};
 struct adjacent *adj[6];
void addedge(int a,int b, int w);
void push(int a, int b);
int pop();
void spanningtree();
struct adjacent *head;
struct adjacent *tail;
 int main() {
	 int i,j,k;
	 for(i = 0;i<6;i++) {
		adj[i] = NULL;
		w[i] = 10000;
		
	 }
	 addedge(1,2,3);
	 addedge(1,3,2);
	 addedge(1,4,6);
	 addedge(3,2,4);
	 addedge(3,4,4);
	 addedge(2,5,2);

	 push(1,0);
	 for(i = 2;i<6;i++) {

		 push(i,10000);		
	 }
	 printf("pushed initialy \n");
	spanningtree();
	while(rhead!= NULL) {
		printf("%d,%d \n", rhead->val, rhead->weight);
		rhead = rhead->next;
	}
	Sleep(100000);
	return 0;
 }

 void addedge(int a,int b, int w) {
	 struct adjacent *node;
	 node = (struct adjacent *)malloc(sizeof(struct adjacent));
	 node->val = b;
	 node->weight = w;
	 node->next = adj[a];
	 adj[a] = node;
 }

 void spanningtree() {

	 while(head!=NULL) {
	 int a = pop();
	 printf("popped %d \n", a);
	 struct adjacent *node;
	 node = adj[a];
	 while(node!=NULL) {
		 if(w[node->val] > node->weight) {
			 push(node->val, node->weight);
			 printf("pushed %d,%d \n", node->val, node->weight);
			 
		 } 
		 node = node->next;
	 }
	 }
}

void push(int a,int b) {
	 printf("pushing %d,%d \n",a, b);
	int done = 0;
	struct adjacent *x = head;
	struct adjacent *px = head;
	struct adjacent *node;
	 node = (struct adjacent *)malloc(sizeof(struct adjacent));
	 node->val = a;
	 w[a] = b;
	 node->weight = b;
	 node->next = NULL;
	 while(x!=NULL) {
		 if(x->val == a && x == head) {
			head = head->next;
			break;
		 } else if (x->val == a && x ->next == NULL) {
			 px->next =NULL;
			 break;
		 } else if (x->val == a) {
			 px -> next = x-> next;
			 break;
		 } else {
			 px = x;
			 x = x->next;
			 printf("not needed\n");
		 }
	 }

	 x = head;

	 if(x == NULL || b<x->weight) {
		  printf("pushing %d,%d \n",a, b);
		 node->next = head;
		 head = node;
		 x = head;
		 done = 1;
	 }
	 while(done == 0 && x->next!=NULL) {
	    if(b > x->weight && b<x->next->weight) {
	    	node->next = x->next;
		    x->next = node;
			break;
	    } 
		x = x->next;
	 }
	 if(done == 0) {
		if(b>=x->weight) {
			x->next = node;
		}
	 }
}


int pop() {
	int a;
	struct adjacent *node;
	 node = (struct adjacent *)malloc(sizeof(struct adjacent));
	 node ->val = head->val;
	 node->weight = head->weight;
	 node->next = rhead;
	 rhead= node;
	a = head->val;
	head = head->next;
	return(a);
}
